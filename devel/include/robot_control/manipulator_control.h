// Generated by gencpp from file robot_control/manipulator_control.msg
// DO NOT EDIT!


#ifndef ROBOT_CONTROL_MESSAGE_MANIPULATOR_CONTROL_H
#define ROBOT_CONTROL_MESSAGE_MANIPULATOR_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_control
{
template <class ContainerAllocator>
struct manipulator_control_
{
  typedef manipulator_control_<ContainerAllocator> Type;

  manipulator_control_()
    : base(0)
    , base_pwm(0)
    , ac1(0)
    , ac1_pwm(0)
    , ac2(0)
    , ac2_pwm(0)
    , ac3(0)
    , ac3_pwm(0)
    , wrist(0)
    , wrist_pwm(0)
    , claw(0)
    , claw_pwm(0)  {
    }
  manipulator_control_(const ContainerAllocator& _alloc)
    : base(0)
    , base_pwm(0)
    , ac1(0)
    , ac1_pwm(0)
    , ac2(0)
    , ac2_pwm(0)
    , ac3(0)
    , ac3_pwm(0)
    , wrist(0)
    , wrist_pwm(0)
    , claw(0)
    , claw_pwm(0)  {
  (void)_alloc;
    }



   typedef uint8_t _base_type;
  _base_type base;

   typedef uint8_t _base_pwm_type;
  _base_pwm_type base_pwm;

   typedef uint8_t _ac1_type;
  _ac1_type ac1;

   typedef uint8_t _ac1_pwm_type;
  _ac1_pwm_type ac1_pwm;

   typedef uint8_t _ac2_type;
  _ac2_type ac2;

   typedef uint8_t _ac2_pwm_type;
  _ac2_pwm_type ac2_pwm;

   typedef uint8_t _ac3_type;
  _ac3_type ac3;

   typedef uint8_t _ac3_pwm_type;
  _ac3_pwm_type ac3_pwm;

   typedef uint8_t _wrist_type;
  _wrist_type wrist;

   typedef uint8_t _wrist_pwm_type;
  _wrist_pwm_type wrist_pwm;

   typedef uint8_t _claw_type;
  _claw_type claw;

   typedef uint8_t _claw_pwm_type;
  _claw_pwm_type claw_pwm;





  typedef boost::shared_ptr< ::robot_control::manipulator_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_control::manipulator_control_<ContainerAllocator> const> ConstPtr;

}; // struct manipulator_control_

typedef ::robot_control::manipulator_control_<std::allocator<void> > manipulator_control;

typedef boost::shared_ptr< ::robot_control::manipulator_control > manipulator_controlPtr;
typedef boost::shared_ptr< ::robot_control::manipulator_control const> manipulator_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_control::manipulator_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_control::manipulator_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_control::manipulator_control_<ContainerAllocator1> & lhs, const ::robot_control::manipulator_control_<ContainerAllocator2> & rhs)
{
  return lhs.base == rhs.base &&
    lhs.base_pwm == rhs.base_pwm &&
    lhs.ac1 == rhs.ac1 &&
    lhs.ac1_pwm == rhs.ac1_pwm &&
    lhs.ac2 == rhs.ac2 &&
    lhs.ac2_pwm == rhs.ac2_pwm &&
    lhs.ac3 == rhs.ac3 &&
    lhs.ac3_pwm == rhs.ac3_pwm &&
    lhs.wrist == rhs.wrist &&
    lhs.wrist_pwm == rhs.wrist_pwm &&
    lhs.claw == rhs.claw &&
    lhs.claw_pwm == rhs.claw_pwm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_control::manipulator_control_<ContainerAllocator1> & lhs, const ::robot_control::manipulator_control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::manipulator_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_control::manipulator_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control::manipulator_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_control::manipulator_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::manipulator_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_control::manipulator_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_control::manipulator_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a6a779fd1572e741e193ee9c3b3ad415";
  }

  static const char* value(const ::robot_control::manipulator_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa6a779fd1572e741ULL;
  static const uint64_t static_value2 = 0xe193ee9c3b3ad415ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_control::manipulator_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_control/manipulator_control";
  }

  static const char* value(const ::robot_control::manipulator_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_control::manipulator_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 base\n"
"uint8 base_pwm\n"
"uint8 ac1\n"
"uint8 ac1_pwm\n"
"uint8 ac2\n"
"uint8 ac2_pwm\n"
"uint8 ac3\n"
"uint8 ac3_pwm\n"
"uint8 wrist\n"
"uint8 wrist_pwm\n"
"uint8 claw\n"
"uint8 claw_pwm\n"
;
  }

  static const char* value(const ::robot_control::manipulator_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_control::manipulator_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.base);
      stream.next(m.base_pwm);
      stream.next(m.ac1);
      stream.next(m.ac1_pwm);
      stream.next(m.ac2);
      stream.next(m.ac2_pwm);
      stream.next(m.ac3);
      stream.next(m.ac3_pwm);
      stream.next(m.wrist);
      stream.next(m.wrist_pwm);
      stream.next(m.claw);
      stream.next(m.claw_pwm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct manipulator_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_control::manipulator_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_control::manipulator_control_<ContainerAllocator>& v)
  {
    s << indent << "base: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.base);
    s << indent << "base_pwm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.base_pwm);
    s << indent << "ac1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ac1);
    s << indent << "ac1_pwm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ac1_pwm);
    s << indent << "ac2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ac2);
    s << indent << "ac2_pwm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ac2_pwm);
    s << indent << "ac3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ac3);
    s << indent << "ac3_pwm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ac3_pwm);
    s << indent << "wrist: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrist);
    s << indent << "wrist_pwm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wrist_pwm);
    s << indent << "claw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.claw);
    s << indent << "claw_pwm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.claw_pwm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_CONTROL_MESSAGE_MANIPULATOR_CONTROL_H
